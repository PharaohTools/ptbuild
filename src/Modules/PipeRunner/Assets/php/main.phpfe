<?php

$pipeRunner = new \PipeRunner() ;
$pipeRunner->setPageTriggers() ;


class PipeRunner {

    protected $done = false ;
    protected $max = 0 ;
    protected static $updateRunning = true ;
    protected static $pageUpdater = null ;
    protected static $outUpdater = null ;
    protected static $reqStatus = null ;

    public static function setPageTriggers() {
        
        $jQuery = \js_core::$jQuery ;

        if ($jQuery('#updatable')->length === 1) {
            $updateTimer = function () use ($jQuery) {
                $now = \js_core::$php->time() ;
                $start_time = $jQuery('#timer')->attr('data-start_time') ;
                $time_difference = $now - $start_time ;
                $friendly_time_difference = \js_core::$php->date('H:i:s', $time_difference) ;
                $jQuery('#timer')->html( $friendly_time_difference ) ;
            } ;
            self::$pageUpdater = \js_core::$window->setInterval($updateTimer, 1000);
        }

        $jQuery('#page_scroll_end')->on('click', function($jqthis) use ($jQuery)  {
            $scroll_height = \js_core::$window->document->body->scrollHeight ;
            \js_core::$window->scrollTo(0, $scroll_height);
        });

        $jQuery('.params_display_button')->on('click', function($jqthis) use ($jQuery)  {
            $run_id = $jQuery('#'.$jqthis->target->id)->attr('data-run_id') ;
            \js_core::$console->log('clicked params button') ;
            $overlay_title = "<h3>Parameters for Run ID: <strong>".$run_id."</strong></h3>" ;
            $overlay_content = "" ;
            $history_index = \js_core::$window->build_run_params ;
            $decoded = \js_core::$php->json_decode($history_index[$run_id]) ;
            foreach ($decoded as $paramKey => $paramValue) {
                $overlay_content = $overlay_content . "<p>".$paramKey.":<strong>".$paramValue."</strong></p>" ;
            }
            \WindowMessage::showOverlay($overlay_title, $overlay_content) ;
        });


        $jQuery('.metadata_display_button')->on('click', function($jqthis) use ($jQuery)  {
            \js_core::$console->log('clicked meta button') ;
            $run_id = $jQuery('#'.$jqthis->target->id)->attr('data-run_id') ;
            $overlay_title = "<h3>Metadata for Run ID: <strong>".$run_id."</strong></h3>" ;
            $overlay_content = "" ;
            $meta = \js_core::$window->build_run_metadata ;
            \js_core::$console->log('meta', $meta) ;
            if ($meta[$run_id] !== null) {
                \js_core::$console->log('mri', $meta[$run_id]) ;
                $decoded = \js_core::$php->json_decode($meta[$run_id], true) ;
                \js_core::$console->log('dcd', $decoded) ;
                $overlay_content = self::objectToHTML($decoded);
            } else {
                $overlay_content = $overlay_content . "<p>No Metadata available</p>" ;
            }
            \WindowMessage::showOverlay($overlay_title, $overlay_content) ;
        });

        $control = \js_core::$window->getParameterByName('control') ;
        $action = \js_core::$window->getParameterByName('action') ;
        \js_core::$console->log("testing control and action with", $control, $action);

        $is_start_or_show = false ;
        if ($action == 'start') { $is_start_or_show = true ; }
        if ($action == 'show') { $is_start_or_show = true ; }

        if ($control == 'PipeRunner') {
            if ($is_start_or_show == true) {
                \js_core::$console->log("inside piperunner start");
                self::$outUpdater = \js_core::$window->setInterval(function () {
                    if (self::$updateRunning === true) {
                        \js_core::$console->log("calling update page js method, updateRunning variable is set to true");
                        self::updatePage();
                    } else {
                        \js_core::$console->log("not calling update page js method, updateRunning variable is set to false");
                    }
                }, 4000);
            } else {
                \js_core::$console->log("outside piperunner start");
            }
        }

    }

    protected static function objectToHTML($start_object, $depth=1) {
        $html = '' ;
        $gap = '&nbsp;&nbsp;' ;
        $gap_str = \js_core::$php->str_repeat ($gap, $depth)  ;
        foreach ($start_object as $paramKey => $paramValue) {
            if (\js_core::$php->is_object($paramValue)) {
                $html = $html . "<p>".$gap_str.$paramKey.":</p>" ;
                \js_core::$console->log('one log', $paramValue) ;
                $ojht = self::objectToHTML($paramValue, $depth+1) ;
                $html = $html . $ojht ;
            } else if (\js_core::$php->is_string($paramValue)) {
                $html = $html . "<p>".$gap_str.$paramKey.": <strong>". $paramValue."</strong></p>" ;
            }
        }
        return $html ;
    }


    public static function updatePage() {
        \js_core::$console->log("running update page js method");
        self::$updateRunning = false ;
        \js_core::$console->log("setting update running to true");
        $item = \js_core::$window->pipeitem ;
        $runid = \js_core::$window->runid ;
        \js_core::$console->log("item runid: ", $item, $runid);
        $url = "/index.php?control=PipeRunner&action=service&item=" . $item . "&run-id=" . $runid . "&output-format=SERVICE";

        $data = array(
            'type' => 'POST',
            'url' => $url,
        ) ;

        $jQuery = \js_core::$jQuery ;

        $ajax_object = $jQuery->ajax($data);
        $ajax_object->done(
            function ($data) use ($jQuery) {
                $current_data = $jQuery('#updatable')->html();
                if ($current_data !== $data) {
                    $jQuery('#updatable')->html($data);
                }
                self::$updateRunning = true ;
            }
        );
        $ajax_object->always(
            function ($data) {
                // Schedule the next request when the current one's complete
                self::setStatus();
                \js_core::$console->log("Req Status: " . self::$reqStatus);
                if (self::$reqStatus === "OK") {
                    self::doCompletion($data); }
                self::$updateRunning = true ;
            }
        );

    }

    public static function setStatus() {
        $item = \js_core::$window->pipeitem ;
        $runid = \js_core::$window->runid ;
        $url = "/index.php?control=PipeRunner&action=pipestatus&item=" . $item . "&run-id=" . $runid . "&output-format=PIPESTATUS";
        \js_core::$console->log($url);
        $data = array(
            'type' => 'POST',
            'url' => $url,
        ) ;
        $jQuery = \js_core::$jQuery ;
        $ajax_object = $jQuery->ajax($data);
        $ajax_object->done(
            function ($data) use ($jQuery) {
                self::$reqStatus = $data ;
                \js_core::$console->log("pipestat: " . $data) ;
            }
        );

    }

    public static function doCompletion($data) {
        self::removeWaitImage();
        self::changeSubButton();
        self::setSuccessFailureOnPage($data);
        \js_core::$window->clearInterval(self::$outUpdater);
        \js_core::$window->clearInterval(self::$pageUpdater);
    }

    public static function removeWaitImage() {
        $jQuery = \js_core::$jQuery ;
        $jQuery("#loading-holder")->remove() ;
        $jQuery(".terminate-build")->remove() ;
    }

    public static function setSuccessFailureOnPage($data) {
        $jQuery = \js_core::$jQuery ;

        \js_core::$console->log("set success failure on page: " . $data) ;

        $success_string = '[Pharaoh Build] [PipeRunner] SUCCESSFUL EXECUTION' ;
        $failure_string = '[Pharaoh Build] [PipeRunner] FAILED EXECUTION' ;
        $is_success = (\js_core::$php->strpos($data, $success_string) !== false)  ;
        $is_failure = (\js_core::$php->strpos($data, $failure_string) !== false)  ;
        $success_html = '<button class="btn btn-success build_status_banner_text" id="status_banner_button" type="button">BUILD SUCCESS</button>' ;
        $failure_html = '<button class="btn btn-danger build_status_banner_text" id="status_banner_button" type="button">BUILD FAILURE</button>' ;
        $warning_html = '<button class="btn btn-warning build_status_banner_text" id="status_banner_button" type="button">STATUS UNKNOWN</button>' ;

        if ($is_success) {
            $jQuery("#status_banner")->html($success_html) ;
        } elseif ($is_failure) {
            $jQuery("#status_banner")->html($failure_html) ;
        } else {
            $jQuery("#status_banner")->html($warning_html) ;
        }
    }

    public static function changeSubButton() {
        $subhtml = '<div class="col-sm-offset-2 col-sm-8">';
        $subhtml = $subhtml . '  <div class="text-center">';
        $subhtml = $subhtml . '    <button type="submit" class="btn btn-primary" id="close-complete">';
        $subhtml = $subhtml . '        Close Execution Screen';
        $subhtml = $subhtml . '    </button>';
        $subhtml = $subhtml . '  </div>';
        $subhtml = $subhtml . '</div>' ;
        $jQuery = \js_core::$jQuery ;
        $jQuery("#submit-holder")->html($subhtml) ;
    }
}


